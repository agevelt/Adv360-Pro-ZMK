
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#define HOST_OS 1 // 1 is linux. This is used to specify how the dk_ae, dk_oe, dk_aa macros should be interpreted.
#include "./zmk-nodefree-config/helper.h"
#include "./zmk-nodefree-config/international_chars/danish.dtsi"



/*     ADVANTAGE 360 PRO LAYOUT V3
 ╭────────────────────────────┬────────────────────────────╮
 │  0   1   2   3   4   5   6 │  7   8   9  10  11  12  13 │
 │ 14  15  16  17  18  19  20 │ 21  22  23  24  25  26  27 │
 │ 28  29  30  31  32  33  34 │ 39  40  41  42  43  44  45 │
 │ 46  47  48  49  50  51 ╭───┴───╮ 54  56  57  58  59  60 │
 │ 61  62  63  64  65╭────╯       ╰────╮72  73  74  75  76 │
 ╰───────────────────┼────────┬────────┼───────────────────╯
                 ╭───╯ 35  36 │ 37  38 ╰───╮
                 │         52 │ 53         │
                 │ 66  67  68 │ 69  70  71 │
                 ╰────────────┴────────────╯*/



#define KEYS_LEFT  0  1  2  3  4  5  6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  61 62 63 64 65

#define KEYS_RIGHT  7  8  9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                      54 56 57 58 59 60 \
                         72 73 74 75 76

#define THUMBS_LEFT    35 36 \
                          52 \
                    66 67 68

#define THUMBS_RIGHT 37 38 \
                     53 \
                     69 70 71

#define THUMBS THUMBS_LEFT THUMBS_RIGHT

/ {
    combos {
        compatible = "zmk,combos";
        
        //undo, copy, cut, paste, and redo commands
        combo_undo {
            timeout-ms = <50>;
            key-positions = <47 48>; // Z+X
            bindings = <&kp LC(Z)>;
            layers = <0>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <47 49>; // Z+C
            bindings = <&kp LC(X)>;
            layers = <0>;
        }; 
        combo_copy {
            timeout-ms = <50>;
            key-positions = <48 49>; // X+C
            bindings = <&kp LC(C)>;
            layers = <0>;
        };        
        combo_paste {
            timeout-ms = <50>;
            key-positions = <49 50>; // C+V
            bindings = <&kp LC(V)>;
            layers = <0>;
        };
        combo_redo {
            timeout-ms = <50>;
            key-positions = <47 50>; // Z+V
            bindings = <&kp LC(LS(Z))>;
            layers = <0>;
        };


        // MAC version, enabled by toggling layer 5
        combo_mac_undo {
            timeout-ms = <50>;
            key-positions = <47 48>; // Z+X
            bindings = <&kp LCMD(Z)>;
            layers = <5>;
        };
        combo_mac_cut {
            timeout-ms = <50>;
            key-positions = <47 49>; // Z+C
            bindings = <&kp LCMD(X)>;
            layers = <5>;
        };
        combo_mac_copy {
            timeout-ms = <50>;
            key-positions = <48 49>; // X+C
            bindings = <&kp LCMD(C)>;
            layers = <5>;
        };
        combo_mac_paste {
            timeout-ms = <50>;
            key-positions = <49 50>; // C+V
            bindings = <&kp LCMD(V)>;
            layers = <5>;
        };
        combo_mac_redo {
            timeout-ms = <50>;
            key-positions = <47 50>; // Z+V
            bindings = <&kp LCMD(LS(Z))>;
            layers = <5>;
        };
    };
};


/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick_tap_ms = <150>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };

    hm_l: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT";
        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick_tap_ms = <150>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
        hold-trigger-on-release;
        global-quick-tap;

    };

    hm_r: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT";
        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick_tap_ms = <150>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
        hold-trigger-on-release;
        global-quick-tap;

    };
  };

// Home row mods 
#define _A_CMD &hm_l LCMD A  // CMD/WIN on pinky fingers
#define _C_CMD &hm_r RCMD SEMICOLON
#define _S_ALT &hm_l LALT S   // ALT/OPT on ring fingers
#define _L_ALT &hm_r LALT L   
#define _D_CTL &hm_l LCTL D   // CTL on middle fingers
#define _K_CTL &hm_r RCTL K
#define _F_SFT &hm_l LSHFT F  // SHIFT on index fingers
#define _J_SFT &hm_r RSHFT J

// Mac version on layer 5 swaps CTRL and CMD (to pinky and middle finger respectively), toggle layer with macro key 4
#define _A_CTL &hm_l LCTL A  // CTL on pinky fingers
#define _C_CTL &hm_r LCTL SEMICOLON
#define _D_CMD &hm_l LCMD D   // CMD on middle fingers
#define _K_CMD &hm_r RCMD K


    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL       &kp N1          &kp N2      &kp N3     &kp N4  &kp N5                 &tog 1                                                                              &mo 3  &kp N6    &kp N7      &kp N8      &kp N9       &kp N0  &kp MINUS
   &kp TAB        &kp Q           &kp W       &kp E      &kp R   &kp T            &kp LS(TAB)                                                                              &none   &kp Y     &kp U       &kp I       &kp O        &kp P   &kp BSLH
   &kp ESC       _A_CMD          _S_ALT      _D_CTL     _F_SFT   &kp G                &kp TAB     &kp LCTRL      &kp HOME                  &kp PG_UP        &kp RCTRL      &tog 5  &kp H    _J_SFT      _K_CTL      _L_ALT       _C_CMD    &kp SQT
 &kp LSHFT        &kp Z           &kp X       &kp C      &kp V   &kp B                                            &kp END                  &kp PG_DN                               &kp N     &kp M   &kp COMMA     &kp DOT     &kp FSLH  &kp RSHFT
     &mo 2    &kp GRAVE        &kp CAPS    &kp LEFT  &kp RIGHT                      &kp LCTRL  &kp LEFT_ALT  &kp LEFT_WIN                  &kp ENTER  &lt 4 BACKSPACE  &kp SPACE          &kp DOWN      &kp UP    &kp LBKT     &kp RBKT      &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans                  &trans  &trans   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_Layer__4 {
            bindings = <
 &trans  &trans        &trans  &trans  &trans           &trans            &trans                                                  &trans      &trans            &trans      &trans                &trans                 &trans  &trans
 &trans  &trans        &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY            &trans                                                  &trans      &trans            &trans      &trans                &dk_oe                 &trans  &trans
 &trans  &dk_aa        &kp N4  &kp N5  &kp N6     &kp KP_MINUS            &trans  &trans  &trans                  &trans  &trans  &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_MUTE            &kp C_NEXT                 &dk_ae  &trans
 &trans  &trans  &kp NUMBER_1  &kp N2  &kp N3      &kp KP_PLUS                            &trans                  &trans                      &trans            &trans      &trans                &trans                 &trans  &trans
 &trans  &trans  &kp NUMBER_0  &trans  &trans                             &trans  &trans  &trans                  &trans  &trans  &trans                        &trans      &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
            >;
        };

        layer_Layer__5 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                   &trans &trans  &trans  &trans  &trans    &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  _A_CTL  _S_ALT  _D_CMD  _F_SFT  &trans             &none  &trans  &trans                  &trans  &trans   &tog 5 &trans  _J_SFT  _K_CMD   _L_ALT   _C_CTL   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };
    };
};
